from netpyne import specs, sim
import numpy as np

# DOCUMENTATION ----------------------------------------------------------------
''' Please visit: https://www.netpyne.org '''
# Python script automatically generated by NetPyNE v1.0.5+osbv2 from netParams and simConfig objects

# SCRIPT =======================================================================
netParams = specs.NetParams()
simConfig = specs.SimConfig()

# SINGLE VALUED ATTRIBUTES -----------------------------------------------------

netParams.sizeX = 100           # x-dimension (horizontal length) size in um
netParams.sizeY = 200             # y-dimension (vertical height or cortical depth) size in um
netParams.sizeZ = 100              # z-dimension (horizontal length) size in um
netParams.propVelocity = 100.0     # propagation velocity (um/ms)
netParams.probLengthConst = 150.0  # length constant for conn probability (um)

# NETWORK ATTRIBUTES -----------------------------------------------------------

# Unfortunatelly, the following code is not working, despite the fact that it is in the official documentation
# cellsList = []
# cellsList.append({'cellType':'Spiral_Ganglion_Cell_type1', 'yRange':[100,150], 'numCells':100})
# cellsList.append({'cellType':'Spiral_Ganglion_Cell_type2', 'yRange':[100,150], 'numCells':100})
# netParams.popParams['rosenthal_canal'] = {
#     "cellsList": cellsList
# }
netParams.popParams['IHC_Cochlear_Spiral'] = {
    "cellType": "Inner_Hair_Cell",
    'yRange': [80,120],
    "numCells": 32 #original 3200, divided by 100 for testing purposes
}
netParams.popParams['OHC_Cochlear_Spiral'] = {
    "cellType": "Outer_Hair_Cell",
    'yRange': [140,160],
    "numCells": 100
}
netParams.popParams['SGCB_type_1'] = {
    "cellType": "Spiral_Ganglion_Cell_type1",
    'yRange': [0,50],
    "numCells": 270
}
netParams.popParams['SGCB_type_2'] = {
    "cellType": "Spiral_Ganglion_Cell_type2",
    'yRange': [40,60],
    "numCells": 30
}

netParams.cellParams['Outer_Hair_Cell'] = {
    "conds": {},
    "secs": {
        "soma": {
            "geom": {
                "diam": 18,
                "L": 18,
                "Ra": 100.0,
                "cm": 1
            },
            "mechs": {
                "hh": {
                    "gnabar": 0.12,
                    "gkbar": 0.036,
                    "gl": 0.0003,
                    "el": -54.3
                }
            }
        },
        "stereocilia": {
            "geom": {
                "L": 8,
                "diam": 0.2,
                "cm": 1.7,
                "Ra": 80
            },
            "topol": {
                "parentSec": "soma",
                "parentX": 1,
                "childX": 0
            },
            "mechs": {
                "hh": {
                    "gnabar": 0.12,
                    "gkbar": 0.036,
                    "gl": 0.0003,
                    "el": -54.3
                }
            }
        }
    }
}
netParams.cellParams['Inner_Hair_Cell'] = {
    "conds": {},
    "secs": {
        "soma": {
            "geom": {
                "diam": 20,
                "L": 20,
                "Ra": 100.0,
                "cm": 1
            },
            "mechs": {
                "hh": {
                    "gnabar": 0.12,
                    "gkbar": 0.036,
                    "gl": 0.0003,
                    "el": -54.3
                }
            }
        },
        "stereocilia": {
            "geom": {
                "Ra": 40,
                "cm": 1.7,
                "diam": 0.4,
                "L": 5
            },
            "topol": {
                "parentSec": "soma",
                "parentX": 1,
                "childX": 0
            },
            "mechs": {
                "hh": {
                    "gnabar": 0.12,
                    "gkbar": 0.036,
                    "gl": 0.0003,
                    "el": -54.3
                }
            }
        }
    }
}
netParams.cellParams['Spiral_Ganglion_Cell_type1'] = {
    "conds": {},
    "secs": {
        "soma": {
            "geom": {
                "diam": 30,
                "L": 30,
                "Ra": 100.0,
                "cm": 1
            },
            "mechs": {
                "hh": {
                    "gnabar": 0.12,
                    "gkbar": 0.036,
                    "gl": 0.0003,
                    "el": -54.3
                }
            }
        },
        "central_axon": {
            "geom": {
                "L": 1000,
                "diam": 1,
                "Ra": 100,
                "cm": 1
            },
            "topol": {
                "parentSec": "soma",
                "parentX": 0,
                "childX": 1
            },
            "mechs": {
                "pas": {
                    "g": 0.001,
                    "e": -70
                }
            }
        },
        "peripheral_process": {
            "geom": {
                "L": 100,
                "diam": 1,
                "Ra": 100,
                "cm": 1
            },
            "topol": {
                "parentSec": "soma",
                "parentX": 1,
                "childX": 0
            },
            "mechs": {
                "pas": {
                    "g": 0.001,
                    "e": -70
                }
            }
        }
    }
}
netParams.cellParams['Spiral_Ganglion_Cell_type2'] = {
    "conds": {},
    "secs": {
        "soma": {
            "geom": {
                "diam": 15,
                "L": 15,
                "Ra": 100.0,
                "cm": 1
            },
            "mechs": {
                "hh": {
                    "gnabar": 0.12,
                    "gkbar": 0.036,
                    "gl": 0.0003,
                    "el": -54.3
                }
            }
        },
        "central_axon": {
            "geom": {
                "diam": 1,
                "L": 1000,
                "Ra": 100,
                "cm": 1
            },
            "topol": {
                "parentSec": "soma",
                "parentX": 0,
                "childX": 1
            },
            "mechs": {
                "pas": {
                    "g": 0.001,
                    "e": -70
                }
            }
        },
        "peripheral_process": {
            "geom": {
                "diam": 1,
                "L": 100,
                "Ra": 100,
                "cm": 1
            },
            "topol": {
                "parentSec": "soma",
                "parentX": 1,
                "childX": 0
            },
            "mechs": {
                "pas": {
                    "g": 0.001,
                    "e": -70
                }
            }
        }
    }
}

netParams.synMechParams['AMPA'] = {
    "mod": "Exp2Syn",
    "tau1": 0.05,
    "tau2": 5.3,
    "e": 0
}
netParams.synMechParams['NMDA'] = {
    "mod": "Exp2Syn",
    "tau1": 15,
    "tau2": 150,
    "e": 0
}
netParams.synMechParams['excitatory_background'] = {
    "mod": "Exp2Syn",
    "tau1": 0.1,
    "tau2": 1,
    "e": 0
}

netParams.connParams['IHC->type1'] = {
    "preConds": {
        "pop":"IHC_Cochlear_Spiral"
    },
    "postConds": {
        "pop":"SGCB_type_1"
    },
    "weight": 0.005,
    "convergence": 1, # Number of presynaptic cells connected to each postsynaptic cell
    "delay": 5,
    "synMech":"AMPA",
    "sec": "peripheral_process", # Name of target section on the postsynaptic neuron
    "loc": 1.0,
}
# to make sure we do not end up with non-connected cells
# divergence_num = np.floor(netParams.popParams['SGCB_type_1']["numCells"] / netParams.popParams['IHC_Cochlear_Spiral']["numCells"])
netParams.connParams['OHC->type2'] = {
    "preConds": {
        "pop":"OHC_Cochlear_Spiral"
    },
    "postConds": {
        "pop":"SGCB_type_2"
    },
    "weight": 0.001,
    "divergence": 1, # Number of postsynaptic cells connected to each presynaptic cell
    "delay": 5,
    "synMech":"AMPA",
    "sec": "peripheral_process", # Name of target section on the postsynaptic neuron
    "loc": 1.0,
}

# Stimulations

netParams.stimSourceParams['background_stim'] = {
    'type': 'NetStim',
    'rate': 10,
    'noise': 0.001
    }
netParams.stimSourceParams['IClamp1'] = {
    "type": "IClamp",
    "dur": 5,
    "del": 20,
    "amp": 0.13,
}


# netParams.stimTargetParams['IClamp1->type1_peripheral'] = {
#     "source": "IClamp1",
#     "conds": {'cellType': 'Spiral_Ganglion_Cell_type1'},
#     "sec": "peripheral_process",
#     "loc": 1.0,
# }
# netParams.stimTargetParams['background_stim->IHC'] = {
#     'source': 'background_stim',
#     'conds': {'cellType': 'Inner_Hair_Cell'},
#     'weight': 0.01,
#     'delay': 5,
#     'synMech':'excitatory_background'
#     }
# netParams.stimTargetParams['background_stim->OHC'] = {
#     'source': 'background_stim',
#     'conds': {'cellType': 'Outer_Hair_Cell'},
#     'weight': 0.01,
#     'delay': 5,
#     'synMech':'excitatory_background'
#     }

# Stimulations for modeled hearing loss

stimulation_percentage = 10

# OHC x percentage cell GID list loaded from csv
OHC_x_percentage = np.loadtxt('OHC_subset'+str(stimulation_percentage)+'.csv', delimiter=',')
# make sure list contains integers
OHC_x_percentage = OHC_x_percentage.astype(int)

netParams.stimTargetParams['background_stim->OHC x percentage'] = {
    'source': 'background_stim',
    'conds': {'cellList': OHC_x_percentage},
    'weight': 0.01,
    'delay': 5,
    'synMech':'excitatory_background'
    }

# IHC x percentage cell GID list loaded from csv
IHC_x_percentage = np.loadtxt('IHC_subset'+str(stimulation_percentage)+'.csv', delimiter=',')
# make sure list contains integers
IHC_x_percentage = IHC_x_percentage.astype(int)
netParams.stimTargetParams['background_stim->IHC x percentage'] = {
    'source': 'background_stim',
    'conds': {'cellList': IHC_x_percentage},
    'weight': 0.01,
    'delay': 5,
    'synMech':'excitatory_background'
    }

# NETWORK CONFIGURATION --------------------------------------------------------
simConfig.filename = "test1"
simConfig.duration = 500.0
simConfig.dt = 0.01
simConfig.recordStim = True
simConfig.seeds = {'conn': 4321, 'stim': 1234, 'loc': 4321}

simConfig.recordCells = [   ('IHC_Cochlear_Spiral', [0,1,2,3,4,5,6,7,8,9]),
                            ('SGCB_type_1', [0,1,2,3,4,5,6,7,8,9]),
                            # ('OHC_Cochlear_Spiral', [1]),
                            # ('OHC_Cochlear_Spiral', [2]),
                            # ('OHC_Cochlear_Spiral', [3]),
                            # ('OHC_Cochlear_Spiral', [4]),
                            # ('OHC_Cochlear_Spiral', [5]),
                            # ('OHC_Cochlear_Spiral', [6]),
                            # ('OHC_Cochlear_Spiral', [7]),
                            # ('OHC_Cochlear_Spiral', [8]),
                            ]
simConfig.recordTraces = {
    # "a.) soma 1": {
    #     "sec": "soma",
    #     "loc": 1.0,
    #     "var": "v",
    # },
    "V_soma": {
        "sec": "soma",
        "loc": 0.5,
        "var": "v",
    },
    # "c.) soma 0": {
    #     "sec": "soma",
    #     "loc": 0,
    #     "var": "v",
    # },
    # "d.) central_axon 0": {
    #     "sec": "central_axon",
    #     "loc": 0,
    #     "var": "v",
    # },
    # "e.) central_axon 1": {
    #     "sec": "central_axon",
    #     "loc": 1,
    #     "var": "v",
    # },
    # "f.) peripheral_process 0": {
    #     "sec": "peripheral_process",
    #     "loc": 0,
    #     "var": "v",
    # },
    # "g.) peripheral_process 1": {
    #     "sec": "peripheral_process",
    #     "loc": 1,
    #     "var": "v",
    # },
    # "h.) ignore me": {
    #     "sec": "soma",
    #     "loc": 0.25,
    #     "var": "v",
    # }
}



simConfig.analysis = {
    "plotTraces": {
        "include": [0],
        "saveFig": True,
    },
    "plotRaster": {
        "saveFig": True,
    }
}